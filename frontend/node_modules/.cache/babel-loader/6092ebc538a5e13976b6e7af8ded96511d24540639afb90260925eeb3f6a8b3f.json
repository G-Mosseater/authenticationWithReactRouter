{"ast":null,"code":"import { redirect } from \"react-router-dom\";\n\n// Calculate how much time is left until the token expires\nexport function getTokenDuration() {\n  const storedExpirationDate = localStorage.getItem(\"expiration\"); // get expiration from localStorage\n  const expirationDate = new Date(storedExpirationDate); // convert to Date object\n  const now = new Date();\n  const duration = expirationDate.getTime() - now.getTime(); // milliseconds remaining\n  return duration;\n}\n\n// Get (extract) the token from localStorage and check expiration\nexport function getAuthToken() {\n  const token = localStorage.getItem(\"token\"); // get token from browser storage\n  if (!token) {\n    return null; // no token → user not logged in\n  }\n  const tokenDuration = getTokenDuration();\n  if (tokenDuration < 0) {\n    return \"EXPIRED\"; // token expired → trigger auto logout\n  }\n  return token; // return token if valid\n}\n\n// This loader function is used by React Router to fetch data before rendering a route\n// Here it simply gets the token from localStorage\nexport function tokenLoader() {\n  return getAuthToken(); // returns token string or null if not logged in\n}\n\n// Loader function to protect routes that require authentication\nexport function checkAuthLoader() {\n  const token = getAuthToken(); // Get token from localStorage\n\n  // If no token exists, the user is not logged in\n  // Redirect them to the authentication page\n  if (!token) {\n    return redirect(\"/auth\");\n  }\n\n  // If token exists, allow access by returning null\n  return null;\n}","map":{"version":3,"names":["redirect","getTokenDuration","storedExpirationDate","localStorage","getItem","expirationDate","Date","now","duration","getTime","getAuthToken","token","tokenDuration","tokenLoader","checkAuthLoader"],"sources":["/home/gabon/Documents/Udemy React/Resources/React Authentication/01-starting-project/frontend/src/util/auth.js"],"sourcesContent":["import { redirect } from \"react-router-dom\";\n\n// Calculate how much time is left until the token expires\nexport function getTokenDuration() {\n  const storedExpirationDate = localStorage.getItem(\"expiration\"); // get expiration from localStorage\n  const expirationDate = new Date(storedExpirationDate); // convert to Date object\n  const now = new Date();\n  const duration = expirationDate.getTime() - now.getTime(); // milliseconds remaining\n  return duration; \n}\n\n// Get (extract) the token from localStorage and check expiration\nexport function getAuthToken() {\n  const token = localStorage.getItem(\"token\"); // get token from browser storage\n  if (!token) {\n    return null; // no token → user not logged in\n  }\n\n  const tokenDuration = getTokenDuration();\n  if (tokenDuration < 0) {\n    return \"EXPIRED\"; // token expired → trigger auto logout\n  }\n\n  return token; // return token if valid\n}\n\n// This loader function is used by React Router to fetch data before rendering a route\n// Here it simply gets the token from localStorage\nexport function tokenLoader() {\n  return getAuthToken(); // returns token string or null if not logged in\n}\n\n// Loader function to protect routes that require authentication\nexport function checkAuthLoader() {\n  const token = getAuthToken(); // Get token from localStorage\n\n  // If no token exists, the user is not logged in\n  // Redirect them to the authentication page\n  if (!token) {\n    return redirect(\"/auth\");\n  }\n\n  // If token exists, allow access by returning null\n  return null;\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,kBAAkB;;AAE3C;AACA,OAAO,SAASC,gBAAgBA,CAAA,EAAG;EACjC,MAAMC,oBAAoB,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;EACjE,MAAMC,cAAc,GAAG,IAAIC,IAAI,CAACJ,oBAAoB,CAAC,CAAC,CAAC;EACvD,MAAMK,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;EACtB,MAAME,QAAQ,GAAGH,cAAc,CAACI,OAAO,CAAC,CAAC,GAAGF,GAAG,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC;EAC3D,OAAOD,QAAQ;AACjB;;AAEA;AACA,OAAO,SAASE,YAAYA,CAAA,EAAG;EAC7B,MAAMC,KAAK,GAAGR,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC7C,IAAI,CAACO,KAAK,EAAE;IACV,OAAO,IAAI,CAAC,CAAC;EACf;EAEA,MAAMC,aAAa,GAAGX,gBAAgB,CAAC,CAAC;EACxC,IAAIW,aAAa,GAAG,CAAC,EAAE;IACrB,OAAO,SAAS,CAAC,CAAC;EACpB;EAEA,OAAOD,KAAK,CAAC,CAAC;AAChB;;AAEA;AACA;AACA,OAAO,SAASE,WAAWA,CAAA,EAAG;EAC5B,OAAOH,YAAY,CAAC,CAAC,CAAC,CAAC;AACzB;;AAEA;AACA,OAAO,SAASI,eAAeA,CAAA,EAAG;EAChC,MAAMH,KAAK,GAAGD,YAAY,CAAC,CAAC,CAAC,CAAC;;EAE9B;EACA;EACA,IAAI,CAACC,KAAK,EAAE;IACV,OAAOX,QAAQ,CAAC,OAAO,CAAC;EAC1B;;EAEA;EACA,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}