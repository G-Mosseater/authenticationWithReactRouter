{"ast":null,"code":"import { redirect } from \"react-router-dom\";\nexport function getTokenDuration() {\n  const storedExpirationDate = localStorage.getItem('expiration');\n  const expirationDate = new Date(storedExpirationDate);\n  const now = new Date();\n  const duration = expirationDate.getTime();\n}\n\n// A function to get (extract) the token from the browser's localStorage\nexport function getAuthToken() {\n  // Look inside localStorage for an item saved with the key \"token\"\n  // localStorage is like a small storage space inside the browser\n  // Example: if we saved localStorage.setItem(\"token\", \"abc123\"),\n  // this will retrieve \"abc123\"\n  const token = localStorage.getItem(\"token\");\n\n  // 2. Return the token so other parts of the app can use it\n  // If there is no token saved, this will return null\n  return token;\n}\n\n// This loader function is used by React Router to fetch data before rendering a route\n// Here it simply gets the token from localStorage\nexport function tokenLoader() {\n  return getAuthToken(); // returns token string or null if not logged in\n}\n\n// Loader function to protect routes that require authentication\nexport function checkAuthLoader() {\n  const token = getAuthToken(); // Get token from localStorage\n\n  // If no token exists, the user is not logged in\n  // Redirect them to the authentication page\n  if (!token) {\n    return redirect(\"/auth\");\n  }\n\n  // If token exists, allow access by returning null\n  return null;\n}","map":{"version":3,"names":["redirect","getTokenDuration","storedExpirationDate","localStorage","getItem","expirationDate","Date","now","duration","getTime","getAuthToken","token","tokenLoader","checkAuthLoader"],"sources":["/home/gabon/Documents/Udemy React/Resources/React Authentication/01-starting-project/frontend/src/util/auth.js"],"sourcesContent":["import { redirect } from \"react-router-dom\";\n\nexport function getTokenDuration() {\n    const storedExpirationDate = localStorage.getItem('expiration')\n    const expirationDate = new Date(storedExpirationDate)\n    const now = new Date()\n    const duration = expirationDate.getTime() \n}\n\n// A function to get (extract) the token from the browser's localStorage\nexport function getAuthToken() {\n  // Look inside localStorage for an item saved with the key \"token\"\n  // localStorage is like a small storage space inside the browser\n  // Example: if we saved localStorage.setItem(\"token\", \"abc123\"),\n  // this will retrieve \"abc123\"\n  const token = localStorage.getItem(\"token\");\n\n  // 2. Return the token so other parts of the app can use it\n  // If there is no token saved, this will return null\n  return token;\n}\n\n// This loader function is used by React Router to fetch data before rendering a route\n// Here it simply gets the token from localStorage\nexport function tokenLoader() {\n  return getAuthToken(); // returns token string or null if not logged in\n}\n\n// Loader function to protect routes that require authentication\nexport function checkAuthLoader() {\n  const token = getAuthToken(); // Get token from localStorage\n\n  // If no token exists, the user is not logged in\n  // Redirect them to the authentication page\n  if (!token) {\n    return redirect(\"/auth\");\n  }\n\n  // If token exists, allow access by returning null\n  return null;\n}"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAE3C,OAAO,SAASC,gBAAgBA,CAAA,EAAG;EAC/B,MAAMC,oBAAoB,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAC/D,MAAMC,cAAc,GAAG,IAAIC,IAAI,CAACJ,oBAAoB,CAAC;EACrD,MAAMK,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;EACtB,MAAME,QAAQ,GAAGH,cAAc,CAACI,OAAO,CAAC,CAAC;AAC7C;;AAEA;AACA,OAAO,SAASC,YAAYA,CAAA,EAAG;EAC7B;EACA;EACA;EACA;EACA,MAAMC,KAAK,GAAGR,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA;EACA,OAAOO,KAAK;AACd;;AAEA;AACA;AACA,OAAO,SAASC,WAAWA,CAAA,EAAG;EAC5B,OAAOF,YAAY,CAAC,CAAC,CAAC,CAAC;AACzB;;AAEA;AACA,OAAO,SAASG,eAAeA,CAAA,EAAG;EAChC,MAAMF,KAAK,GAAGD,YAAY,CAAC,CAAC,CAAC,CAAC;;EAE9B;EACA;EACA,IAAI,CAACC,KAAK,EAAE;IACV,OAAOX,QAAQ,CAAC,OAAO,CAAC;EAC1B;;EAEA;EACA,OAAO,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}